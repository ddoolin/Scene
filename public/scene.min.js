window.Scene.HomeController = function() {
    var a = this;
    this.createMap = function(b) {
        localStorage.setItem("currentLatitude", b.coords.latitude), localStorage.setItem("currentLongitude", b.coords.longitude);
        var c, d, e = b.coords.latitude, f = b.coords.longitude;
        d = {
            center: new google.maps.LatLng(e, f),
            zoom: 12,
            streetViewControl: !1,
            panControl: !1,
            mapTypeControl: !0,
            zoomControlOptions: {
                position: google.maps.ControlPosition.LEFT_CENTER
            },
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }, c = new google.maps.Map(document.getElementById("map_canvas"), d), window.Scene.map = c, 
        a.populateMap();
    }, this.populateMap = function() {
        window.Scene.events, _.each(window.Scene.events, function(a) {
            var b = new google.maps.LatLng(a.location.latitude, a.location.longitude);
            new google.maps.Marker({
                map: window.Scene.map,
                position: b,
                animation: google.maps.Animation.DROP,
                title: a.name
            });
        });
    }, this.setDefaultTimes = function() {
        var a = new Date(), b = a.getHours() + 1;
        $("#from_date").val(a.getMonth() + 1 + "/" + (b >= 24 ? a.getDate() + 1 : a.getDate()) + "/" + a.getFullYear()), 
        $("#to_date").val(a.getMonth() + 1 + "/" + (b + 1 >= 24 ? a.getDate() + 1 : a.getDate()) + "/" + a.getFullYear()), 
        $("#from_time").val((b > 12 ? b - 12 : b) + ":00 " + (24 === b || 12 > b ? "am" : "pm")), 
        $("#to_time").val((b + 1 > 12 ? b + 1 > 24 ? Math.ceil((b + 1) / 2) - 12 : b + 1 - 12 : b + 1) + ":00 " + (b + 1 >= 24 || 12 > b + 1 ? "am" : "pm"));
    };
}, function(a) {
    var b = window.Scene, c = new b.HomeController();
    (function() {
        if (Modernizr.geolocation) if (localStorage.getItem("currentLatitude") && localStorage.getItem("currentLongitude")) {
            var a = localStorage.getItem("currentLatitude"), b = localStorage.getItem("currentLongitude"), d = {
                coords: {
                    latitude: a,
                    longitude: b
                }
            };
            c.createMap(d);
        } else navigator.geolocation.getCurrentPosition(c.createMap); else console.log("Geolocation API not supported");
    })(), function() {
        var a = window.socket = null;
        null === a && (a = io.connect("/home"), a.on("connect", function() {}), a.on("message", function() {}), 
        a.on("disconnect", function() {})), a.socket.connect(), window.socket = a;
    }(), function() {
        a("#login").popover({
            html: !0,
            placement: "bottom",
            content: function() {
                return a("#login_popover_content").html();
            }
        }), a("#from_date").datepicker({
            minDate: new Date(),
            altField: a("#from_date"),
            dateFormat: "m/d/yy"
        }), a("#to_date").datepicker({
            minDate: new Date(),
            altField: a("#to_date"),
            dateFormat: "m/d/yy"
        }), a("#from_time, #to_time").focus(function(b) {
            a(b.target).siblings(".hour-select").show();
        }).keydown(function(b) {
            a(b.target).siblings(".hour-select").hide();
        }).blur(function(b) {
            a(b.target).siblings(".hour-select").hide();
        }), c.setDefaultTimes(), a("#create_event_modal").on("shown", function() {
            a("#event_name").focus();
        });
    }();
}(jQuery), function() {
    "use strict";
    window.Scene || (window.Scene = {}), window.Scene.PhotoView = Backbone.View.extend({
        tagName: "div",
        className: "photo",
        template: _.template("<img src='<?=e.image?>'/>"),
        initialize: function() {
            this.listenTo(this.model, "change", this.render), this.render();
        },
        render: function() {
            var a = this.model.get("position"), b = this.model.get("size");
            return this.$el.css({
                left: a.x + "px",
                top: a.y + "px",
                width: b.width + "px",
                height: b.height + "px",
                "-webkit-transform": "rotate(" + this.model.get("rotation") + "deg)"
            }), this.$el.html(this.template({
                e: this.model.toJSON()
            })), this;
        }
    });
}(jQuery);